#!/bin/bash
# Colores para mejorar la visibilidad de los logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # Sin color

# Cargar la URL base desde un script externo
source curl-scripts/set-API-URL.sh

# Valores fijos
USER_NAME="juan_perez"
USER_EMAIL="juan@example.com"
USER_PASSWORD="secreto123"

sign_up() {
  local telegram="@${USER_NAME}"
  local telefono="123456789"
  echo -e "${BLUE}üîπ Registrando usuario: ${YELLOW}${USER_NAME}${BLUE} (${YELLOW}${USER_EMAIL}${BLUE})${NC}"
  local response=$(curl -s -X POST "$API_URL/auth/sign-up" \
    -H "Content-Type: application/json" \
    -d "{
          \"username\": \"$USER_NAME\",
          \"email\": \"$USER_EMAIL\",
          \"password\": \"$USER_PASSWORD\",
          \"telegram\": \"$telegram\",
          \"telefono\": \"$telefono\"
        }")
  echo -e "${GREEN}üìå Respuesta de sign-up:${NC}"
  echo "$response"
}

login() {
  echo -e "${BLUE}üîπ Iniciando sesi√≥n para obtener JWT...${NC}"
  LOGIN_RESPONSE=$(curl -s -X POST "$API_URL/auth/log-in" \
    -H "Content-Type: application/json" \
    -d "{
         \"email\": \"$USER_EMAIL\",
         \"password\": \"$USER_PASSWORD\"
        }")
  TOKEN=$(echo "$LOGIN_RESPONSE" | grep -o '"token":"[^"]*' | cut -d':' -f2 | tr -d '"')
  if [ -z "$TOKEN" ]; then
    echo -e "${RED}‚ùå Error: No se obtuvo el token de login${NC}"
    exit 1
  else
    echo -e "${GREEN}üîë Token obtenido: ${YELLOW}$TOKEN${NC}"
  fi
}

# Endpoint base para usuarios
USUARIOS_ENDPOINT="${API_URL}/usuarios"

crear_usuario() {
  echo -e "${BLUE}Creando usuario...${NC}"
  local response=$(curl -s -X POST -H "Content-Type: application/json" \
    -H "Authorization: Bearer $TOKEN" \
    -d '{
      "credentials": {
        "username": "juan_perez",
        "email": "juan@example.com",
        "password": "secreto123",
        "telegram": "@juanp",
        "telefono": "+5491112345678"
      },
      "rol": "Minibus",
      "estado": "Pendiente"
    }' \
    ${USUARIOS_ENDPOINT})
  echo -e "${GREEN}Respuesta creaci√≥n:${NC}"
  echo "$response" | jq .
  local user_id=$(echo "$response" | jq -r '.id')
  echo -e "${GREEN}ID Usuario creado: ${YELLOW}$user_id${NC}"
  echo "$user_id"
}

listar_usuarios() {
  echo -e "\n${BLUE}Listando todos los usuarios...${NC}"
  curl -s -X GET -H "Authorization: Bearer $TOKEN" ${USUARIOS_ENDPOINT} | jq .
}

obtener_usuario() {
  local user_id=$1
  echo -e "\n${BLUE}Obteniendo usuario ${YELLOW}$user_id...${NC}"
  curl -s -X GET -H "Authorization: Bearer $TOKEN" ${USUARIOS_ENDPOINT}/${user_id} | jq .
}

actualizar_usuario() {
  local user_id=$1
  echo -e "\n${BLUE}Actualizando usuario ${YELLOW}$user_id...${NC}"
  curl -s -X PUT -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN" \
    -d '{
      "estado": "Aprobado",
      "credentials": {
        "telefono": "+5491122334455"
      }
    }' \
    ${USUARIOS_ENDPOINT}/${user_id} | jq .
}

eliminar_usuario() {
  local user_id=$1
  echo -e "\n${BLUE}Eliminando usuario ${YELLOW}$user_id...${NC}"
  curl -s -X DELETE -H "Authorization: Bearer $TOKEN" ${USUARIOS_ENDPOINT}/${user_id}
}

verificar_eliminacion() {
  local user_id=$1
  echo -e "\n${BLUE}Verificando eliminaci√≥n del usuario ${YELLOW}$user_id...${NC}"
  curl -s -X GET -H "Authorization: Bearer $TOKEN" ${USUARIOS_ENDPOINT}/${user_id} | jq .
}

# Ejecutar el flujo completo
sign_up
login
USER_ID=$(crear_usuario)
listar_usuarios
obtener_usuario "$USER_ID"
actualizar_usuario "$USER_ID"
eliminar_usuario "$USER_ID"
verificar_eliminacion "$USER_ID"
